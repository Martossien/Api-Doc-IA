# üåê Guide de Configuration Proxy - Api-Doc-IA Demo Client

Ce guide vous aide √† configurer votre proxy d'entreprise **AVANT** la premi√®re installation.

## ‚ö†Ô∏è Important

**Vous devez configurer le proxy AVANT d'ex√©cuter les scripts de build**, car pip a besoin d'acc√©der √† Internet pour t√©l√©charger les d√©pendances.

## ü™ü Configuration Windows

### M√©thode 1 : Variables d'environnement temporaires

1. **Ouvrir une invite de commande** (cmd)
2. **Configurer le proxy** pour cette session :
   ```cmd
   set HTTP_PROXY=http://proxy.entreprise.com:8080
   set HTTPS_PROXY=http://proxy.entreprise.com:8080
   ```
3. **Lancer le build** depuis cette m√™me invite de commande :
   ```cmd
   cd C:\chemin\vers\demo_client
   build_scripts\build_windows.bat
   ```

### M√©thode 2 : Variables d'environnement permanentes

1. **Panneau de configuration** ‚Üí Syst√®me ‚Üí Param√®tres syst√®me avanc√©s
2. **Variables d'environnement** ‚Üí Nouvelles variables syst√®me :
   - `HTTP_PROXY` = `http://proxy.entreprise.com:8080`
   - `HTTPS_PROXY` = `http://proxy.entreprise.com:8080`
3. **Red√©marrer** l'invite de commande
4. **Lancer le build** normalement

### M√©thode 3 : Script batch personnalis√©

Cr√©ez un fichier `build_with_proxy.bat` :
```cmd
@echo off
set HTTP_PROXY=http://proxy.entreprise.com:8080
set HTTPS_PROXY=http://proxy.entreprise.com:8080
echo Proxy configur√©: %HTTP_PROXY%
call build_scripts\build_windows.bat
pause
```

## üêß Configuration Linux

### M√©thode 1 : Variables d'environnement temporaires

1. **Ouvrir un terminal**
2. **Configurer le proxy** pour cette session :
   ```bash
   export HTTP_PROXY=http://proxy.entreprise.com:8080
   export HTTPS_PROXY=http://proxy.entreprise.com:8080
   ```
3. **Lancer le build** depuis ce m√™me terminal :
   ```bash
   cd /chemin/vers/demo_client
   ./build_scripts/build_linux.sh
   ```

### M√©thode 2 : Variables d'environnement permanentes

1. **√âditer le fichier de profil** :
   ```bash
   nano ~/.bashrc
   # ou
   nano ~/.zshrc
   ```
2. **Ajouter les lignes** :
   ```bash
   export HTTP_PROXY=http://proxy.entreprise.com:8080
   export HTTPS_PROXY=http://proxy.entreprise.com:8080
   ```
3. **Recharger le profil** :
   ```bash
   source ~/.bashrc
   ```

### M√©thode 3 : Script shell personnalis√©

Cr√©ez un fichier `build_with_proxy.sh` :
```bash
#!/bin/bash
export HTTP_PROXY=http://proxy.entreprise.com:8080
export HTTPS_PROXY=http://proxy.entreprise.com:8080
echo "Proxy configur√©: $HTTP_PROXY"
./build_scripts/build_linux.sh
```

Rendez-le ex√©cutable :
```bash
chmod +x build_with_proxy.sh
./build_with_proxy.sh
```

## üîß Formats de Proxy Courants

### Proxy simple (sans authentification)
```
http://proxy.entreprise.com:8080
```

### Proxy avec authentification
```
http://utilisateur:motdepasse@proxy.entreprise.com:8080
```

### Proxy HTTPS
```
https://proxy.entreprise.com:8443
```

### Proxy avec port sp√©cifique
```
http://10.0.0.1:3128
```

## üß™ Test de Configuration

### Test rapide pip
```bash
# Windows
pip --proxy http://proxy:8080 list

# Linux  
pip3 --proxy http://proxy:8080 list
```

### Test connectivit√© avec curl
```bash
# Test HTTP
curl --proxy http://proxy:8080 http://www.google.com

# Test HTTPS
curl --proxy http://proxy:8080 https://pypi.org
```

## üìã Checklist de D√©pannage

### ‚úÖ V√©rifications de base
- [ ] L'adresse du proxy est correcte
- [ ] Le port du proxy est correct
- [ ] Les identifiants sont corrects (si n√©cessaire)
- [ ] Le proxy autorise le trafic HTTP/HTTPS
- [ ] Pas de caract√®res sp√©ciaux non √©chapp√©s dans l'URL

### ‚úÖ Tests de connectivit√©
- [ ] Ping vers le serveur proxy r√©ussit
- [ ] Navigateur web fonctionne avec ce proxy
- [ ] Autre logiciel utilise ce proxy avec succ√®s

### ‚úÖ Variables d'environnement
- [ ] HTTP_PROXY d√©fini correctement
- [ ] HTTPS_PROXY d√©fini correctement
- [ ] Variables visibles dans l'invite de commande/terminal

## üÜò Probl√®mes Courants

### "Connection refused" ou "Network unreachable"
- V√©rifiez l'adresse et le port du proxy
- Testez avec un navigateur web
- Contactez l'administrateur r√©seau

### "Proxy authentication required"
- Ajoutez vos identifiants dans l'URL :
  `http://user:pass@proxy:8080`
- V√©rifiez vos identifiants avec l'administrateur

### "SSL Certificate verification failed"
- Le proxy peut bloquer les certificats SSL
- Contactez l'administrateur pour la configuration HTTPS
- Utilisez HTTP au lieu de HTTPS si possible

### "Access denied" ou "Forbidden"
- Le proxy peut bloquer pypi.org
- Demandez √† l'administrateur d'autoriser :
  - `pypi.org`
  - `files.pythonhosted.org`
  - `github.com`

## üí° Conseils Avanc√©s

### Variables d'environnement suppl√©mentaires
```bash
# Exclure certaines adresses du proxy
export NO_PROXY=localhost,127.0.0.1,.local

# Proxy pour tous les protocoles
export ALL_PROXY=http://proxy:8080
```

### Configuration proxy dans pip.conf
Cr√©ez `~/.pip/pip.conf` (Linux) ou `%APPDATA%\pip\pip.ini` (Windows) :
```ini
[global]
proxy = http://proxy.entreprise.com:8080
trusted-host = pypi.org
               files.pythonhosted.org
```

### Test avec Python
```python
import os
import requests

# V√©rifier les variables
print("HTTP_PROXY:", os.environ.get('HTTP_PROXY'))
print("HTTPS_PROXY:", os.environ.get('HTTPS_PROXY'))

# Test requ√™te
try:
    r = requests.get('https://pypi.org/simple/', timeout=10)
    print("Connectivit√© PyPI: OK")
except Exception as e:
    print("Erreur:", e)
```

## üìû Support

Si vous rencontrez des difficult√©s :

1. **V√©rifiez vos param√®tres** avec votre administrateur r√©seau
2. **Testez la connectivit√©** avec les commandes ci-dessus
3. **Consultez les logs** d√©taill√©s des scripts de build
4. **Utilisez le script de test** : `python test_proxy.py`

---

**üí° Astuce :** Gardez ces param√®tres proxy √† port√©e de main, vous en aurez besoin pour d'autres outils Python dans votre environnement d'entreprise !
