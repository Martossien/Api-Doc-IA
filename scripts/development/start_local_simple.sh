#!/bin/bash

# =============================================================================
# üöÄ SCRIPT DE DEMARRAGE API-DOC-IA - VERSION SIMPLE
# =============================================================================
# Version simplifi√©e qui fonctionne si conda est d√©j√† activ√©
# =============================================================================

set -e  # Arr√™t en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration des chemins
PROJECT_ROOT="/home/admin_ia/api/Api-Doc-IA"
BACKEND_PATH="$PROJECT_ROOT/backend"
LOG_FILE="$PROJECT_ROOT/api_doc_ia_startup.log"
PID_FILE="$PROJECT_ROOT/api_doc_ia.pid"
LOCK_FILE="$PROJECT_ROOT/api_doc_ia.lock"

echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}üöÄ D√âMARRAGE API-DOC-IA SIMPLE${NC}"
echo -e "${BLUE}============================================${NC}"

# Fonction de nettoyage en cas d'arr√™t
cleanup() {
    echo -e "\n${YELLOW}‚ö†Ô∏è Arr√™t en cours...${NC}"
    
    # Supprimer le verrouillage
    rm -f "$LOCK_FILE"
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        echo -e "${YELLOW}üîÑ Arr√™t du processus $PID${NC}"
        kill $PID 2>/dev/null || true
        sleep 2
        
        # Force kill si n√©cessaire
        if kill -0 $PID 2>/dev/null; then
            echo -e "${YELLOW}üîÑ Arr√™t forc√©...${NC}"
            kill -9 $PID 2>/dev/null || true
        fi
        
        rm -f "$PID_FILE"
    fi
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
    exit 0
}

# Capturer les signaux d'arr√™t
trap cleanup SIGINT SIGTERM

# =============================================================================
# V√âRIFICATIONS RAPIDES
# =============================================================================

echo -e "${BLUE}üîç V√©rifications rapides...${NC}"

# V√©rifier les instances existantes
if [ -f "$PID_FILE" ]; then
    PID=$(cat "$PID_FILE")
    if kill -0 $PID 2>/dev/null; then
        echo -e "${RED}‚ùå Instance d√©j√† en cours (PID: $PID)${NC}"
        echo -e "${YELLOW}üí° Utilisez: ./stop_all_api_instances.sh${NC}"
        exit 1
    else
        rm -f "$PID_FILE"
    fi
fi

# V√©rifier le port 8080
if lsof -t -i:8080 2>/dev/null >/dev/null; then
    echo -e "${RED}‚ùå Port 8080 d√©j√† utilis√©${NC}"
    echo -e "${YELLOW}üí° Utilisez: ./stop_all_api_instances.sh${NC}"
    exit 1
fi

# V√©rifier que nous sommes dans le bon r√©pertoire
cd "$PROJECT_ROOT" || {
    echo -e "${RED}‚ùå Impossible d'acc√©der au r√©pertoire: $PROJECT_ROOT${NC}"
    exit 1
}

# V√©rifier que le backend existe
if [ ! -f "$BACKEND_PATH/open_webui/main.py" ]; then
    echo -e "${RED}‚ùå Fichier main.py non trouv√©: $BACKEND_PATH/open_webui/main.py${NC}"
    exit 1
fi

# Cr√©er le fichier de verrouillage
echo $$ > "$LOCK_FILE"
echo -e "${GREEN}üîí Verrouillage cr√©√© (PID: $$)${NC}"

# =============================================================================
# CONFIGURATION PYTHON
# =============================================================================

echo -e "${BLUE}üêç Configuration Python...${NC}"

# V√©rifier l'environnement conda
CURRENT_ENV=$(conda info --envs | grep '*' | awk '{print $1}' 2>/dev/null || echo "unknown")
echo -e "${BLUE}   Environnement conda actuel: $CURRENT_ENV${NC}"

if [ "$CURRENT_ENV" != "api-doc-ia" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Vous n'√™tes pas dans l'environnement 'api-doc-ia'${NC}"
    echo -e "${YELLOW}üí° Activez d'abord: conda activate api-doc-ia${NC}"
    exit 1
fi

# Configuration du PYTHONPATH pour forcer l'utilisation du code local
echo -e "${BLUE}üìÅ Configuration du PYTHONPATH pour le code local...${NC}"
export PYTHONPATH="$BACKEND_PATH:$PYTHONPATH"

# V√©rification que Python utilise bien notre code local
echo -e "${BLUE}üîç V√©rification du module Open WebUI utilis√©...${NC}"
WEBUI_PATH=$(python -c "import open_webui; print(open_webui.__file__)" 2>/dev/null || echo "ERREUR")

if [[ "$WEBUI_PATH" == *"$BACKEND_PATH"* ]]; then
    echo -e "${GREEN}‚úÖ Utilisation du code local: $WEBUI_PATH${NC}"
else
    echo -e "${RED}‚ùå ERREUR: Python utilise une autre version: $WEBUI_PATH${NC}"
    echo -e "${YELLOW}üí° For√ßage du PYTHONPATH...${NC}"
    export PYTHONPATH="$BACKEND_PATH"
    # Nouvelle v√©rification
    WEBUI_PATH=$(python -c "import open_webui; print(open_webui.__file__)" 2>/dev/null || echo "ERREUR")
    if [[ "$WEBUI_PATH" == *"$BACKEND_PATH"* ]]; then
        echo -e "${GREEN}‚úÖ Maintenant utilise le code local: $WEBUI_PATH${NC}"
    else
        echo -e "${RED}‚ùå ERREUR: Impossible de forcer l'utilisation du code local${NC}"
        echo -e "${YELLOW}   PYTHONPATH: $PYTHONPATH${NC}"
        echo -e "${YELLOW}   Module trouv√©: $WEBUI_PATH${NC}"
        exit 1
    fi
fi

# V√©rification de l'API v2
echo -e "${BLUE}üîç V√©rification de l'API v2...${NC}"
python -c "
try:
    from open_webui.routers import api_v2
    print('‚úÖ Module API v2 trouv√©')
except ImportError as e:
    print(f'‚ùå Module API v2 non trouv√©: {e}')
    exit(1)
" || exit 1

# =============================================================================
# CONFIGURATION ET D√âMARRAGE
# =============================================================================

# Configuration des variables d'environnement
echo -e "${BLUE}‚öôÔ∏è Configuration des variables d'environnement...${NC}"
export WEBUI_AUTH=True
export API_V2_ENABLED=True
export HOST=0.0.0.0
export PORT=8080
export WEBUI_LOG_LEVEL=INFO

# Cr√©ation du fichier de log
echo -e "${BLUE}üìù Initialisation du fichier de log: $LOG_FILE${NC}"
echo "============================================" > "$LOG_FILE"
echo "API-DOC-IA STARTUP LOG - $(date)" >> "$LOG_FILE"
echo "============================================" >> "$LOG_FILE"
echo "PROJECT_ROOT: $PROJECT_ROOT" >> "$LOG_FILE"
echo "BACKEND_PATH: $BACKEND_PATH" >> "$LOG_FILE"
echo "PYTHONPATH: $PYTHONPATH" >> "$LOG_FILE"
echo "WEBUI_PATH: $WEBUI_PATH" >> "$LOG_FILE"
echo "CONDA_ENV: $CURRENT_ENV" >> "$LOG_FILE"
echo "PID: $$" >> "$LOG_FILE"
echo "============================================" >> "$LOG_FILE"

# Affichage des informations de d√©marrage
echo -e "${GREEN}üìä INFORMATIONS DE D√âMARRAGE:${NC}"
echo -e "${GREEN}   üè† Projet: $PROJECT_ROOT${NC}"
echo -e "${GREEN}   üêç Code Python: $BACKEND_PATH${NC}"
echo -e "${GREEN}   üìã Log file: $LOG_FILE${NC}"
echo -e "${GREEN}   üåê URL: http://localhost:8080${NC}"
echo -e "${GREEN}   üîå API v2: http://localhost:8080/api/v2/health${NC}"
echo -e "${GREEN}   üìñ Docs: http://localhost:8080/docs${NC}"

# D√©marrage du serveur avec uvicorn directement
echo -e "${BLUE}üöÄ D√©marrage du serveur...${NC}"
echo -e "${YELLOW}üí° Ctrl+C pour arr√™ter le serveur${NC}"

echo "" >> "$LOG_FILE"
echo "========== D√âMARRAGE SERVEUR $(date) ==========" >> "$LOG_FILE"

# S'assurer que le r√©pertoire de travail est correct pour la base de donn√©es
cd "$PROJECT_ROOT"

# Commande de d√©marrage avec redirection vers le log
PYTHONPATH="$BACKEND_PATH" python -m uvicorn open_webui.main:app \
    --host 0.0.0.0 \
    --port 8080 \
    --reload \
    --reload-dir "$BACKEND_PATH/open_webui" \
    --log-level info 2>&1 | tee -a "$LOG_FILE" &

# Sauvegarder le PID
SERVER_PID=$!
echo $SERVER_PID > "$PID_FILE"

echo -e "${GREEN}‚úÖ Serveur d√©marr√© (PID: $SERVER_PID)${NC}"
echo -e "${BLUE}üìã Les logs sont √©crits dans: $LOG_FILE${NC}"

# Attendre quelques secondes puis tester
echo -e "${BLUE}‚è≥ Attente du d√©marrage complet...${NC}"
sleep 5

# Test de l'API v2
echo -e "${BLUE}üß™ Test de l'API v2...${NC}"
if curl -s http://localhost:8080/api/v2/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ API v2 r√©pond correctement${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è API v2 ne r√©pond pas encore (normal au d√©marrage)${NC}"
fi

echo -e "${GREEN}üéâ API-DOC-IA est pr√™t !${NC}"
echo -e "${BLUE}============================================${NC}"

# Attendre que le processus se termine (permet Ctrl+C)
wait $SERVER_PID

# Le cleanup sera appel√© automatiquement par le trap